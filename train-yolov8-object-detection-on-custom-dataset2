import os
import torch
import matplotlib.pyplot as plt
from ultralytics import YOLO

os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

# Load a pretrained model (change to yolov8s.pt, yolov8m.pt, etc.)
model = YOLO("yolov8n.pt")

device = "cuda" if torch.cuda.is_available() else "cpu"

# Train the model and capture the results
train_results = model.train(
    data=r"C:\Users\Benjamin Christensen\Desktop\Masterprojekt\Deep_learning\cropandweed-dataset-main\data\Dataset_configuration_file_for_YOLOv8.yaml",  # Path to your dataset YAML file
    epochs=10,  # Number of epochs
    imgsz=640,
    device=device,
)

# Extract loss values from the training results
train_losses = train_results['train']['loss']
val_losses = train_results['val']['loss']

# Plotting the loss curves
plt.figure(figsize=(10, 5))
plt.plot(train_losses, label='Train Loss')
plt.plot(val_losses, label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Loss Curve')
plt.legend()
plt.show()

# Perform object detection on an image
results = model(r"C:\Users\Benjamin Christensen\Desktop\Masterprojekt\Deep_learning\cropandweed-dataset-main\data\images\ave-0035-0003.jpg")  # Replace with the path to your image
results[0].show()  # Display the results

# Export the model to ONNX format
path = model.export(format="onnx")  # Export the model and get the path to the exported model
print(f"Model exported to: {path}")
